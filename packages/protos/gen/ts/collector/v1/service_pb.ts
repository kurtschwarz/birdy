// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file collector/v1/service.proto (package collector.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message collector.v1.Recorder
 */
export class Recorder extends Message<Recorder> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string lat = 2;
   */
  lat = "";

  /**
   * @generated from field: string long = 3;
   */
  long = "";

  constructor(data?: PartialMessage<Recorder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "collector.v1.Recorder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "lat", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "long", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Recorder {
    return new Recorder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Recorder {
    return new Recorder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Recorder {
    return new Recorder().fromJsonString(jsonString, options);
  }

  static equals(a: Recorder | PlainMessage<Recorder> | undefined, b: Recorder | PlainMessage<Recorder> | undefined): boolean {
    return proto3.util.equals(Recorder, a, b);
  }
}

/**
 * @generated from message collector.v1.CollectRequest
 */
export class CollectRequest extends Message<CollectRequest> {
  /**
   * @generated from field: collector.v1.Recorder recorder = 1;
   */
  recorder?: Recorder;

  /**
   * @generated from field: bytes buffer = 2;
   */
  buffer = new Uint8Array(0);

  constructor(data?: PartialMessage<CollectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "collector.v1.CollectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "recorder", kind: "message", T: Recorder },
    { no: 2, name: "buffer", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CollectRequest {
    return new CollectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CollectRequest {
    return new CollectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CollectRequest {
    return new CollectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CollectRequest | PlainMessage<CollectRequest> | undefined, b: CollectRequest | PlainMessage<CollectRequest> | undefined): boolean {
    return proto3.util.equals(CollectRequest, a, b);
  }
}

/**
 * @generated from message collector.v1.CollectResponse
 */
export class CollectResponse extends Message<CollectResponse> {
  /**
   * @generated from field: bool ok = 1;
   */
  ok = false;

  constructor(data?: PartialMessage<CollectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "collector.v1.CollectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ok", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CollectResponse {
    return new CollectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CollectResponse {
    return new CollectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CollectResponse {
    return new CollectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CollectResponse | PlainMessage<CollectResponse> | undefined, b: CollectResponse | PlainMessage<CollectResponse> | undefined): boolean {
    return proto3.util.equals(CollectResponse, a, b);
  }
}

